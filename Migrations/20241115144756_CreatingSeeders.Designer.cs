// <auto-generated />
using System;
using APiClinique.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace APiClinique.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20241115144756_CreatingSeeders")]
    partial class CreatingSeeders
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("APiClinique.Models.Appointment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("AppointmentDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("appointment_date");

                    b.Property<int>("DoctorId")
                        .HasColumnType("int");

                    b.Property<bool>("IsCanceled")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.HasIndex("PatientId");

                    b.ToTable("Appointments");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AppointmentDate = new DateTime(2024, 11, 16, 9, 47, 56, 634, DateTimeKind.Local).AddTicks(9457),
                            DoctorId = 1,
                            IsCanceled = false,
                            PatientId = 1
                        },
                        new
                        {
                            Id = 2,
                            AppointmentDate = new DateTime(2024, 11, 17, 9, 47, 56, 634, DateTimeKind.Local).AddTicks(9464),
                            DoctorId = 2,
                            IsCanceled = false,
                            PatientId = 2
                        },
                        new
                        {
                            Id = 3,
                            AppointmentDate = new DateTime(2024, 11, 18, 9, 47, 56, 634, DateTimeKind.Local).AddTicks(9466),
                            DoctorId = 1,
                            IsCanceled = false,
                            PatientId = 3
                        },
                        new
                        {
                            Id = 4,
                            AppointmentDate = new DateTime(2024, 11, 19, 9, 47, 56, 634, DateTimeKind.Local).AddTicks(9467),
                            DoctorId = 3,
                            IsCanceled = false,
                            PatientId = 4
                        },
                        new
                        {
                            Id = 5,
                            AppointmentDate = new DateTime(2024, 11, 20, 9, 47, 56, 634, DateTimeKind.Local).AddTicks(9469),
                            DoctorId = 2,
                            IsCanceled = false,
                            PatientId = 5
                        },
                        new
                        {
                            Id = 6,
                            AppointmentDate = new DateTime(2024, 11, 21, 9, 47, 56, 634, DateTimeKind.Local).AddTicks(9470),
                            DoctorId = 1,
                            IsCanceled = false,
                            PatientId = 1
                        },
                        new
                        {
                            Id = 7,
                            AppointmentDate = new DateTime(2024, 11, 22, 9, 47, 56, 634, DateTimeKind.Local).AddTicks(9471),
                            DoctorId = 3,
                            IsCanceled = false,
                            PatientId = 3
                        },
                        new
                        {
                            Id = 8,
                            AppointmentDate = new DateTime(2024, 11, 23, 9, 47, 56, 634, DateTimeKind.Local).AddTicks(9473),
                            DoctorId = 2,
                            IsCanceled = false,
                            PatientId = 4
                        },
                        new
                        {
                            Id = 9,
                            AppointmentDate = new DateTime(2024, 11, 24, 9, 47, 56, 634, DateTimeKind.Local).AddTicks(9474),
                            DoctorId = 1,
                            IsCanceled = false,
                            PatientId = 2
                        },
                        new
                        {
                            Id = 10,
                            AppointmentDate = new DateTime(2024, 11, 25, 9, 47, 56, 634, DateTimeKind.Local).AddTicks(9475),
                            DoctorId = 3,
                            IsCanceled = false,
                            PatientId = 5
                        });
                });

            modelBuilder.Entity("APiClinique.Models.Doctor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Doctors");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            UserId = 2
                        },
                        new
                        {
                            Id = 2,
                            UserId = 3
                        },
                        new
                        {
                            Id = 3,
                            UserId = 8
                        });
                });

            modelBuilder.Entity("APiClinique.Models.Patient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Patients");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            UserId = 4
                        },
                        new
                        {
                            Id = 2,
                            UserId = 5
                        },
                        new
                        {
                            Id = 3,
                            UserId = 6
                        },
                        new
                        {
                            Id = 4,
                            UserId = 7
                        },
                        new
                        {
                            Id = 5,
                            UserId = 10
                        });
                });

            modelBuilder.Entity("APiClinique.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2024, 11, 15, 9, 47, 56, 634, DateTimeKind.Local).AddTicks(9231),
                            Email = "admin@example.com",
                            Name = "admin",
                            Password = "admin123",
                            Role = "admin"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2024, 11, 15, 9, 47, 56, 634, DateTimeKind.Local).AddTicks(9263),
                            Email = "doctorone@example.com",
                            Name = "doctor one",
                            Password = "doctor123",
                            Role = "doctor"
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2024, 11, 15, 9, 47, 56, 634, DateTimeKind.Local).AddTicks(9265),
                            Email = "doctortwo@example.com",
                            Name = "doctor two",
                            Password = "doctor123",
                            Role = "doctor"
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2024, 11, 15, 9, 47, 56, 634, DateTimeKind.Local).AddTicks(9266),
                            Email = "patientone@example.com",
                            Name = "patient one",
                            Password = "patient123",
                            Role = "patient"
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(2024, 11, 15, 9, 47, 56, 634, DateTimeKind.Local).AddTicks(9268),
                            Email = "patienttwo@example.com",
                            Name = "patient two",
                            Password = "patient123",
                            Role = "patient"
                        },
                        new
                        {
                            Id = 6,
                            CreatedAt = new DateTime(2024, 11, 15, 9, 47, 56, 634, DateTimeKind.Local).AddTicks(9269),
                            Email = "patientthree@example.com",
                            Name = "patient three",
                            Password = "patient123",
                            Role = "patient"
                        },
                        new
                        {
                            Id = 7,
                            CreatedAt = new DateTime(2024, 11, 15, 9, 47, 56, 634, DateTimeKind.Local).AddTicks(9270),
                            Email = "patientfour@example.com",
                            Name = "patient four",
                            Password = "patient123",
                            Role = "patient"
                        },
                        new
                        {
                            Id = 8,
                            CreatedAt = new DateTime(2024, 11, 15, 9, 47, 56, 634, DateTimeKind.Local).AddTicks(9272),
                            Email = "doctorthree@example.com",
                            Name = "doctor three",
                            Password = "doctor123",
                            Role = "doctor"
                        },
                        new
                        {
                            Id = 9,
                            CreatedAt = new DateTime(2024, 11, 15, 9, 47, 56, 634, DateTimeKind.Local).AddTicks(9317),
                            Email = "adminuser@example.com",
                            Name = "admin user",
                            Password = "admin123",
                            Role = "admin"
                        },
                        new
                        {
                            Id = 10,
                            CreatedAt = new DateTime(2024, 11, 15, 9, 47, 56, 634, DateTimeKind.Local).AddTicks(9318),
                            Email = "patientfive@example.com",
                            Name = "patient five",
                            Password = "patient123",
                            Role = "patient"
                        });
                });

            modelBuilder.Entity("APiClinique.Models.Appointment", b =>
                {
                    b.HasOne("APiClinique.Models.Doctor", "Doctor")
                        .WithMany("Appointments")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("APiClinique.Models.Patient", "Patient")
                        .WithMany("Appointments")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("APiClinique.Models.Doctor", b =>
                {
                    b.HasOne("APiClinique.Models.User", "User")
                        .WithOne("Doctor")
                        .HasForeignKey("APiClinique.Models.Doctor", "UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("APiClinique.Models.Patient", b =>
                {
                    b.HasOne("APiClinique.Models.User", "User")
                        .WithOne("Patient")
                        .HasForeignKey("APiClinique.Models.Patient", "UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("APiClinique.Models.Doctor", b =>
                {
                    b.Navigation("Appointments");
                });

            modelBuilder.Entity("APiClinique.Models.Patient", b =>
                {
                    b.Navigation("Appointments");
                });

            modelBuilder.Entity("APiClinique.Models.User", b =>
                {
                    b.Navigation("Doctor");

                    b.Navigation("Patient");
                });
#pragma warning restore 612, 618
        }
    }
}
